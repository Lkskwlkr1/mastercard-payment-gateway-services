{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MASTER_CARD_SESSION_JS_SRC","process","REACT_APP_MERCHANT_ID","onScriptLoad","initialized","formSessionUpdate","PaymentSession","window","configure","fields","card","number","securityCode","expiryMonth","expiryYear","nameOnCard","frameEmbeddingMitigation","callbacks","response","console","log","pay","updateSessionFromForm","loadScript","a","document","Promise","reject","resolve","setTimeout","prevScript","querySelector","remove","script","createElement","src","async","onerror","onload","body","appendChild","Wrapper","styled","Box","Payment","onFormSessionUpdated","useState","initializing","setInitializing","handleFormSessionUpdate","useCallback","status","session","id","sourceOfFunds","provided","scheme","errors","cardNumber","message","useEffect","then","catch","error","width","Flex","position","top","right","bottom","left","bg","alignItems","LoadingIndicator","my","Input","type","mb","title","aria-label","readOnly","Button","variant","onClick","App","toggle","setToggle","p","alert","prevToggle","Boolean","location","hostname","match","ReactDOM","render","ThemeProvider","theme","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d8065751.chunk.js","sourcesContent":["import React, { useEffect, useState , useCallback} from 'react';\nimport { Box, Button, Input, Flex, LoadingIndicator } from 'roo-ui/components';\nimport styled from '@emotion/styled';\n\nconst MASTER_CARD_SESSION_JS_SRC = `https://test-gateway.mastercard.com/form/version/52/merchant/${process.env.REACT_APP_MERCHANT_ID}/session.js`;\nconst MPGS_TIMEOUT = 5000;\n\nconst onScriptLoad = ({\n  initialized,\n  formSessionUpdate,\n}) => {\n  const { PaymentSession } = window;\n\n  if (!PaymentSession) {\n    return;\n  }\n\n  PaymentSession.configure({\n    fields: {\n      card: {\n        number: \"#card-number\",\n        securityCode: \"#security-code\",\n        expiryMonth: \"#expiry-month\",\n        expiryYear: \"#expiry-year\",\n        nameOnCard: \"#cardholder-name\",\n      },\n    },\n    frameEmbeddingMitigation: [\"javascript\"],\n    callbacks: {\n      initialized: (response) => {\n        console.log('Session initialized', response);\n        initialized(response);\n      },\n      formSessionUpdate: (response) => {\n        console.log('Form session update', response);\n        formSessionUpdate(response);\n      },\n    },\n  });\n};\n\nconst pay = () => {\n  const { PaymentSession } = window;\n\n  if (!PaymentSession) {\n    return;\n  }\n\n  PaymentSession.updateSessionFromForm('card');\n}\n\nconst loadScript = async (formSessionUpdate) => {\n  if (!document) {\n    return Promise.reject();\n  }\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject();\n    }, MPGS_TIMEOUT);\n\n    const prevScript = document.querySelector(`script[src=\"${MASTER_CARD_SESSION_JS_SRC}\"]`);\n\n    if (prevScript) {\n      prevScript.remove();\n    }\n  \n    const script = document.createElement('script');\n    script.src = MASTER_CARD_SESSION_JS_SRC;\n    script.async = 1;\n    script.onerror = reject;\n    script.onload = () => onScriptLoad({\n      initialized: resolve,\n      formSessionUpdate,\n    });\n  \n    document.body.appendChild(script);\n  }); \n}\n\nconst Wrapper = styled(Box)`\n  iframe {\n    display: block;\n  }\n`;\n\nconst Payment = ({\n  onFormSessionUpdated,\n}) => {\n  const [initializing, setInitializing] = useState(true);\n\n  const handleFormSessionUpdate = useCallback((response) => {\n    // HANDLE RESPONSE FOR UPDATE SESSION\n    if (response.status) {\n      if (\"ok\" === response.status) {\n        console.log(\"Session updated with data: \" + response.session.id);\n        onFormSessionUpdated(response.session.id);\n\n        //check if the security code was provided by the user\n        if (response.sourceOfFunds.provided.card.securityCode) {\n          console.log(\"Security code was provided.\");\n        }\n\n        //check if the user entered a Mastercard credit card\n        if (response.sourceOfFunds.provided.card.scheme === 'MASTERCARD') {\n          console.log(\"The user entered a Mastercard credit card.\")\n        }\n      } else if (\"fields_in_error\" === response.status)  {\n        console.log(\"Session update failed with field errors.\");\n        if (response.errors.cardNumber) {\n          console.log(\"Card number invalid or missing.\");\n        }\n        if (response.errors.expiryYear) {\n          console.log(\"Expiry year invalid or missing.\");\n        }\n        if (response.errors.expiryMonth) {\n          console.log(\"Expiry month invalid or missing.\");\n        }\n        if (response.errors.securityCode) {\n          console.log(\"Security code invalid.\");\n        }\n      } else if (\"request_timeout\" === response.status)  {\n        console.log(\"Session update failed with request timeout: \" + response.errors.message);\n      } else if (\"system_error\" === response.status)  {\n        console.log(\"Session update failed with system error: \" + response.errors.message);\n      }\n    } else {\n      console.log(\"Session update failed: \" + response);\n    }\n  }, [onFormSessionUpdated])\n\n  useEffect(() => {\n    loadScript(handleFormSessionUpdate)\n      .then(() => setInitializing(false))\n      .catch(() => console.error('CANT NOT LOAD MPGS'));\n  }, [handleFormSessionUpdate]);\n\n  return (\n    <Wrapper width=\"300px\">\n      {initializing && (\n        <Flex position=\"absolute\" top=\"0\" right=\"0\" bottom=\"0\" left=\"0\" bg=\"rgba(0, 0, 0, 0.1)\" alignItems=\"center\">\n          <LoadingIndicator />\n        </Flex>\n      )} \n      <Box my=\"2\">Please enter your payment details:</Box>\n      <h3>Credit Card</h3>\n      <Box my=\"2\">\n        Card Number: \n        <Input type=\"text\" mb=\"0\" id=\"card-number\" title=\"card number\" aria-label=\"enter your card number\" readOnly />\n      </Box>\n      <Box my=\"2\">\n        Expiry Month:\n        <Input type=\"text\" mb=\"0\" id=\"expiry-month\" title=\"expiry month\" aria-label=\"two digit expiry month\" readOnly />\n      </Box>\n      <Box my=\"2\">\n        Expiry Year:\n        <Input type=\"text\" mb=\"0\" id=\"expiry-year\" title=\"expiry year\" aria-label=\"two digit expiry year\" readOnly />\n      </Box>\n      <Box my=\"2\">\n        Security Code:\n        <Input type=\"text\" mb=\"0\" id=\"security-code\" title=\"security code\" aria-label=\"three digit CCV security code\" readOnly />\n      </Box>\n      <Box my=\"2\">\n        Cardholder Name:\n        <Input type=\"text\" mb=\"0\" id=\"cardholder-name\" title=\"cardholder name\" aria-label=\"enter name on card\" readOnly />\n      </Box>\n      <Box my=\"2\">\n        <Button variant=\"primary\" onClick={pay}>\n          Pay Now\n        </Button>\n      </Box>\n    </Wrapper>\n  );\n}\n\nconst App = () => {\n  const [toggle, setToggle] = useState(false);\n  \n  return (\n    <Box p=\"4\">\n      {toggle && (<Payment onFormSessionUpdated={alert} />)}\n      <Button onClick={() => setToggle(prevToggle => !prevToggle)}>Toggle</Button>\n    </Box>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'roo-ui/fonts/ciutadella.css';\nimport { ThemeProvider, theme } from 'roo-ui';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render((\n  <ThemeProvider theme={theme}>\n    <App />\n  </ThemeProvider>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}